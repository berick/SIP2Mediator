#!/usr/bin/perl
#:vim:ft=perl
# -----------------------------------------------------------------------
# Copyright (C) 2020 King County Library System
# Bill Erickson <berickxx@gmail.com>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# -----------------------------------------------------------------------
use strict; use warnings;
use POSIX;
use Getopt::Long;
use SIP2Mediator::Server;

my $sip_address     = '127.0.0.1';
my $sip_port        = 6001;
my $http_host       = '10.0.0.58';
my $http_port       = 80;
my $http_proto      = 'http';
my $http_path       = '/sip2-mediator';
my $http_method     = 'POST';
my $sess_param      = 'session';
my $mess_param      = 'message';
my $response_jpath  = '';
my $max_clients     = 120;
my $syslog_facility = 'LOCAL0';
my $ascii           = 0;
my $daemonize       = 0;

sub usage {
    my $exit = shift || 0;

    print <<USAGE;

Synopsis:

    $0 --sip-address $sip_address --sip-port $sip_port \
        --http-host $http_host --http-port $http_port \
        --http-proto $http_proto --http-path /sip2-mediator \
        --max-clients $max_clients --syslog-facility $syslog_facility

Options:

    --sip-address <$sip_address>
        Listen address for SIP server.

    --sip-port <$sip_port>
        List port for SIP server.

    --http-host <$http_host>
        Hostname of HTTP API server.

    --http-port <$http_port>
        Port for HTTP API server.

    --http-proto <$http_proto>
        Protocoal for HTTP API server. http or https.
        
    --http-path <$http_path>
        URL path for HTTP API server
        To use the Evergreen gateway directly, use
        "/gateway?service=open-ils.sip2&method=open-ils.sip2.request".

    --http-method <$http_method>
        HTTP method to use with the server
        To use the Evergreen gateway directly, use
        "GET".

    --session-param <$sess_param>
        CGI parameter name to pass the session key
        To use the Evergreen gateway directly, use
        "param".

    --message-param <$mess_param>
        CGI parameter name to pass the SIP2 message
        To use the Evergreen gateway directly, use
        "param".

    --response-json-path <$response_jpath>
        JSON Path expression used to extract the result message
        from the HTTP response.  For Evergreen use "\$.payload[0]".

    --max-clients <$max_clients>
        Maximum number of SIP client connections allowed.

    --syslog-facility <$syslog_facility>

    --ascii
        Normalized and encode data returned to SIP clients as ASCII.
        Otherwise, uses UTF8.

    --daemonize
        Detach and background the process.

USAGE

    exit($exit);
}

GetOptions(
    'sip-address=s'        => \$sip_address,
    'sip-port=s'           => \$sip_port,
    'http-host=s'          => \$http_host,
    'http-port=s'          => \$http_port,
    'http-proto=s'         => \$http_proto,
    'http-path=s'          => \$http_path,
    'http-method=s'        => \$http_method,
    'session-param=s'      => \$sess_param,
    'message-param=s'      => \$mess_param,
    'response-json-path=s' => \$response_jpath,
    'max-clients=s'        => \$max_clients,
    'syslog-facility=s'    => \$syslog_facility,
    'daemonize'            => \$daemonize,
    'ascii'                => \$ascii,
    'help'                 => sub { usage(0); }
) or usage(1);

my $mediator = SIP2Mediator::Server->new({
    sip_address     => $sip_address,
    sip_port        => $sip_port,
    http_host       => $http_host,
    http_port       => $http_port,
    http_proto      => $http_proto,
    http_path       => $http_path,
    session_param   => $sess_param,
    message_param   => $sess_param,
    response_jpath  => $response_jpath,
    max_clients     => $max_clients,
    syslog_facility => $syslog_facility,
    ascii           => $ascii
});

if ($daemonize) {
    exit(0) if fork(); # parent
    chdir '/';
    setsid;
}

$mediator->listen;


